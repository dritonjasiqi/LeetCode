You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself. 
Example 1: 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummKopf =  new ListNode(0); // Trick die List zu bauen 
        ListNode jetzt = dummKopf;
        int trag = 0;

        while(l1 != null || l2 != null || trag != 0){
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;

            int sum = x + y + trag;
            trag = sum / 10;
            int digit = sum % 10;

            jetzt.next = new ListNode(digit);
            jetzt = jetzt.next;

            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;

        }

        return dummKopf.next; // wir return dummKopf.next weil dummKopf ist z.B 0->1->1->1 aber die summe ist 111 so return wir dummKopf.next so ignorieren wir 0
    }
}

In diesem Leetcode Problem habe ich mir  mit ListNode beqeum gemacht und habe wie man zwei number der liste addiert erlernt. 
Immer noch lernen und Probleme l√∂sen