Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


import java.util.Hashmap;

class Solution{
   public int[] twoSum(int[] nums, int target){
	Hashmap<Integer,Integer> bereitsGesehen  = new Hashmap<>();

	for(int i = 0; i < nums.length; i++){
	   int fehlenderWert  = target - nums[i];
	   if(bereitsGesehen.containsKey(fehlenderWert )){
		return new int[] {bereitsGesehen .get(fehlenderWert ), i};
	    }
	    bereitsGesehen.put(nums[i], i);
	}

	return new int[0]; // Wenn kein LÃ¶sung gibt


   }
}

In diesem LeetCode problem habe ich ein Hashmap verwendt und habe mir bequem mit Hashmaps und arrays gemacht.
 for loop sucht in array bis er den fehlenderWert finde.
Meine Erfahrung:
Ich bin neu im DataStructure und Algorithm jedoch probiere meine Beste besser zu sein. Nie stopp Coding


