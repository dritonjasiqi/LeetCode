Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength = 0;
        int beginn = 0;
        Map<Character,Integer> map = new HashMap<>();

        for(int beend = 0; beend < s.length(); beend++){
            char c = s.charAt(beend);
            if(map.containsKey(c)){
                beginn = Math.max(map.get(c)+ 1, beginn);
            }
            map.put(c,beend);
            maxLength = Math.max(maxLength, beend - beginn + 1);
        }
        return maxLength;
    }
}

Neu Thema Strings, ich war nicht sehr bequem im Java mit Strings jedoch habe still mit einige Tipps die Probleme gelÃ¶st.
Benutzt ein HashMap and math Funktion math.max()